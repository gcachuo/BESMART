#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinQLibrary
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Restaurante")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertDish(Dish instance);
    partial void UpdateDish(Dish instance);
    partial void DeleteDish(Dish instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertOrder_Dish(Order_Dish instance);
    partial void UpdateOrder_Dish(Order_Dish instance);
    partial void DeleteOrder_Dish(Order_Dish instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::LinQLibrary.Properties.Settings.Default.RestauranteConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Dish> Dishes
		{
			get
			{
				return this.GetTable<Dish>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<Order_Dish> Order_Dishes
		{
			get
			{
				return this.GetTable<Order_Dish>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _category_id;
		
		private string _category_name;
		
		private EntityRef<Dish> _Dish;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncategory_idChanging(int value);
    partial void Oncategory_idChanged();
    partial void Oncategory_nameChanging(string value);
    partial void Oncategory_nameChanged();
    #endregion
		
		public Category()
		{
			this._Dish = default(EntityRef<Dish>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int category_id
		{
			get
			{
				return this._category_id;
			}
			set
			{
				if ((this._category_id != value))
				{
					if (this._Dish.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncategory_idChanging(value);
					this.SendPropertyChanging();
					this._category_id = value;
					this.SendPropertyChanged("category_id");
					this.Oncategory_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string category_name
		{
			get
			{
				return this._category_name;
			}
			set
			{
				if ((this._category_name != value))
				{
					this.Oncategory_nameChanging(value);
					this.SendPropertyChanging();
					this._category_name = value;
					this.SendPropertyChanged("category_name");
					this.Oncategory_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_Category", Storage="_Dish", ThisKey="category_id", OtherKey="category_id", IsForeignKey=true)]
		public Dish Dish
		{
			get
			{
				return this._Dish.Entity;
			}
			set
			{
				Dish previousValue = this._Dish.Entity;
				if (((previousValue != value) 
							|| (this._Dish.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dish.Entity = null;
						previousValue.Categories.Remove(this);
					}
					this._Dish.Entity = value;
					if ((value != null))
					{
						value.Categories.Add(this);
						this._category_id = value.category_id;
					}
					else
					{
						this._category_id = default(int);
					}
					this.SendPropertyChanged("Dish");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dish")]
	public partial class Dish : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_dish;
		
		private string _name_dish;
		
		private string _description_dish;
		
		private string _image_dish;
		
		private decimal _cost_dish;
		
		private char _status_dish;
		
		private int _category_id;
		
		private EntitySet<Category> _Categories;
		
		private EntityRef<Order_Dish> _Order_Dish;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_dishChanging(int value);
    partial void Onid_dishChanged();
    partial void Onname_dishChanging(string value);
    partial void Onname_dishChanged();
    partial void Ondescription_dishChanging(string value);
    partial void Ondescription_dishChanged();
    partial void Onimage_dishChanging(string value);
    partial void Onimage_dishChanged();
    partial void Oncost_dishChanging(decimal value);
    partial void Oncost_dishChanged();
    partial void Onstatus_dishChanging(char value);
    partial void Onstatus_dishChanged();
    partial void Oncategory_idChanging(int value);
    partial void Oncategory_idChanged();
    #endregion
		
		public Dish()
		{
			this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
			this._Order_Dish = default(EntityRef<Order_Dish>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_dish", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_dish
		{
			get
			{
				return this._id_dish;
			}
			set
			{
				if ((this._id_dish != value))
				{
					if (this._Order_Dish.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_dishChanging(value);
					this.SendPropertyChanging();
					this._id_dish = value;
					this.SendPropertyChanged("id_dish");
					this.Onid_dishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name_dish", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string name_dish
		{
			get
			{
				return this._name_dish;
			}
			set
			{
				if ((this._name_dish != value))
				{
					this.Onname_dishChanging(value);
					this.SendPropertyChanging();
					this._name_dish = value;
					this.SendPropertyChanged("name_dish");
					this.Onname_dishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description_dish", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string description_dish
		{
			get
			{
				return this._description_dish;
			}
			set
			{
				if ((this._description_dish != value))
				{
					this.Ondescription_dishChanging(value);
					this.SendPropertyChanging();
					this._description_dish = value;
					this.SendPropertyChanged("description_dish");
					this.Ondescription_dishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image_dish", DbType="VarChar(700)")]
		public string image_dish
		{
			get
			{
				return this._image_dish;
			}
			set
			{
				if ((this._image_dish != value))
				{
					this.Onimage_dishChanging(value);
					this.SendPropertyChanging();
					this._image_dish = value;
					this.SendPropertyChanged("image_dish");
					this.Onimage_dishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cost_dish", DbType="Decimal(18,2) NOT NULL")]
		public decimal cost_dish
		{
			get
			{
				return this._cost_dish;
			}
			set
			{
				if ((this._cost_dish != value))
				{
					this.Oncost_dishChanging(value);
					this.SendPropertyChanging();
					this._cost_dish = value;
					this.SendPropertyChanged("cost_dish");
					this.Oncost_dishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status_dish", DbType="Char(1) NOT NULL")]
		public char status_dish
		{
			get
			{
				return this._status_dish;
			}
			set
			{
				if ((this._status_dish != value))
				{
					this.Onstatus_dishChanging(value);
					this.SendPropertyChanging();
					this._status_dish = value;
					this.SendPropertyChanged("status_dish");
					this.Onstatus_dishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_id", DbType="Int NOT NULL")]
		public int category_id
		{
			get
			{
				return this._category_id;
			}
			set
			{
				if ((this._category_id != value))
				{
					this.Oncategory_idChanging(value);
					this.SendPropertyChanging();
					this._category_id = value;
					this.SendPropertyChanged("category_id");
					this.Oncategory_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_Category", Storage="_Categories", ThisKey="category_id", OtherKey="category_id")]
		public EntitySet<Category> Categories
		{
			get
			{
				return this._Categories;
			}
			set
			{
				this._Categories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_Dish_Dish", Storage="_Order_Dish", ThisKey="id_dish", OtherKey="id_dish", IsForeignKey=true)]
		public Order_Dish Order_Dish
		{
			get
			{
				return this._Order_Dish.Entity;
			}
			set
			{
				Order_Dish previousValue = this._Order_Dish.Entity;
				if (((previousValue != value) 
							|| (this._Order_Dish.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order_Dish.Entity = null;
						previousValue.Dishes.Remove(this);
					}
					this._Order_Dish.Entity = value;
					if ((value != null))
					{
						value.Dishes.Add(this);
						this._id_dish = value.id_dish;
					}
					else
					{
						this._id_dish = default(int);
					}
					this.SendPropertyChanged("Order_Dish");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Dish = this;
		}
		
		private void detach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Dish = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_ord;
		
		private System.DateTime _date_ord;
		
		private char _qualification_ord;
		
		private EntitySet<Order_Dish> _Order_Dishes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_ordChanging(int value);
    partial void Onid_ordChanged();
    partial void Ondate_ordChanging(System.DateTime value);
    partial void Ondate_ordChanged();
    partial void Onqualification_ordChanging(char value);
    partial void Onqualification_ordChanged();
    #endregion
		
		public Order()
		{
			this._Order_Dishes = new EntitySet<Order_Dish>(new Action<Order_Dish>(this.attach_Order_Dishes), new Action<Order_Dish>(this.detach_Order_Dishes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_ord", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_ord
		{
			get
			{
				return this._id_ord;
			}
			set
			{
				if ((this._id_ord != value))
				{
					this.Onid_ordChanging(value);
					this.SendPropertyChanging();
					this._id_ord = value;
					this.SendPropertyChanged("id_ord");
					this.Onid_ordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_ord", DbType="DateTime NOT NULL")]
		public System.DateTime date_ord
		{
			get
			{
				return this._date_ord;
			}
			set
			{
				if ((this._date_ord != value))
				{
					this.Ondate_ordChanging(value);
					this.SendPropertyChanging();
					this._date_ord = value;
					this.SendPropertyChanged("date_ord");
					this.Ondate_ordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_qualification_ord", DbType="Char(1) NOT NULL")]
		public char qualification_ord
		{
			get
			{
				return this._qualification_ord;
			}
			set
			{
				if ((this._qualification_ord != value))
				{
					this.Onqualification_ordChanging(value);
					this.SendPropertyChanging();
					this._qualification_ord = value;
					this.SendPropertyChanged("qualification_ord");
					this.Onqualification_ordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_Order_Dish", Storage="_Order_Dishes", ThisKey="id_ord", OtherKey="id_ord")]
		public EntitySet<Order_Dish> Order_Dishes
		{
			get
			{
				return this._Order_Dishes;
			}
			set
			{
				this._Order_Dishes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Order_Dishes(Order_Dish entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_Order_Dishes(Order_Dish entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Order_Dish")]
	public partial class Order_Dish : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_orddish;
		
		private int _id_ord;
		
		private int _id_dish;
		
		private int _n_orddish;
		
		private char _status_orddish;
		
		private EntitySet<Dish> _Dishes;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_orddishChanging(int value);
    partial void Onid_orddishChanged();
    partial void Onid_ordChanging(int value);
    partial void Onid_ordChanged();
    partial void Onid_dishChanging(int value);
    partial void Onid_dishChanged();
    partial void Onn_orddishChanging(int value);
    partial void Onn_orddishChanged();
    partial void Onstatus_orddishChanging(char value);
    partial void Onstatus_orddishChanged();
    #endregion
		
		public Order_Dish()
		{
			this._Dishes = new EntitySet<Dish>(new Action<Dish>(this.attach_Dishes), new Action<Dish>(this.detach_Dishes));
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_orddish", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_orddish
		{
			get
			{
				return this._id_orddish;
			}
			set
			{
				if ((this._id_orddish != value))
				{
					this.Onid_orddishChanging(value);
					this.SendPropertyChanging();
					this._id_orddish = value;
					this.SendPropertyChanged("id_orddish");
					this.Onid_orddishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_ord", DbType="Int NOT NULL")]
		public int id_ord
		{
			get
			{
				return this._id_ord;
			}
			set
			{
				if ((this._id_ord != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_ordChanging(value);
					this.SendPropertyChanging();
					this._id_ord = value;
					this.SendPropertyChanged("id_ord");
					this.Onid_ordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_dish", DbType="Int NOT NULL")]
		public int id_dish
		{
			get
			{
				return this._id_dish;
			}
			set
			{
				if ((this._id_dish != value))
				{
					this.Onid_dishChanging(value);
					this.SendPropertyChanging();
					this._id_dish = value;
					this.SendPropertyChanged("id_dish");
					this.Onid_dishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_n_orddish", DbType="Int NOT NULL")]
		public int n_orddish
		{
			get
			{
				return this._n_orddish;
			}
			set
			{
				if ((this._n_orddish != value))
				{
					this.Onn_orddishChanging(value);
					this.SendPropertyChanging();
					this._n_orddish = value;
					this.SendPropertyChanged("n_orddish");
					this.Onn_orddishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status_orddish", DbType="Char(1) NOT NULL")]
		public char status_orddish
		{
			get
			{
				return this._status_orddish;
			}
			set
			{
				if ((this._status_orddish != value))
				{
					this.Onstatus_orddishChanging(value);
					this.SendPropertyChanging();
					this._status_orddish = value;
					this.SendPropertyChanged("status_orddish");
					this.Onstatus_orddishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_Dish_Dish", Storage="_Dishes", ThisKey="id_dish", OtherKey="id_dish")]
		public EntitySet<Dish> Dishes
		{
			get
			{
				return this._Dishes;
			}
			set
			{
				this._Dishes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_Order_Dish", Storage="_Order", ThisKey="id_ord", OtherKey="id_ord", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.Order_Dishes.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.Order_Dishes.Add(this);
						this._id_ord = value.id_ord;
					}
					else
					{
						this._id_ord = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Dishes(Dish entity)
		{
			this.SendPropertyChanging();
			entity.Order_Dish = this;
		}
		
		private void detach_Dishes(Dish entity)
		{
			this.SendPropertyChanging();
			entity.Order_Dish = null;
		}
	}
}
#pragma warning restore 1591
